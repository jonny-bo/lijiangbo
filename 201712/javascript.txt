# javascript

## 描述
- 时间：2014.7.13
- 题目：javascript

## 内容

一、简介
  （一）发展历史和标准
  （二）说明
    1.代码块：由<script></script>分割的代码段
      <script type="text/javascript">
        代码段一
      </script>
      <script type="text/javascript">
        代码段二
      </script>
      JS按照代码块进行编译和执行，代码块之间相互独立（代码块一的运行出错不会影响到代码块二的执行），但是变量和方法共享。
    2.声明式函数和赋值式函数
      声明式
      function func1(){
      }
      赋值式
      var func2 = function(){
      }
      声明式函数在JS预编译期被提取出来，然后按顺序执行
      赋值式函数是在执行的时候提取出来
    3.预编译和执行
      预编译期JS会对本代码块中的所有声明的变量和函数进行处理，此时处理的函数是声明式函数，而且变量也只是进行了声明但未进行初始化以及赋值。
      #############################################################
      fun();
      function func(){
        console.log("1");
      }
      
      var fun = funciton(){
        console.log("2");
      }
      #############################################################
      >1
      #############################################################
      //同名函数被覆盖
      fun();
      function func(){
        console.log("1");
      }
      
      funciton func(){
        console.log("2");
      }
      #############################################################
      >2
      #############################################################
      //同名函数被覆盖
      function func(){
        console.log("1");
      }
      
      var fun = funciton(){
        console.log("2");
      }
      fun();
      #############################################################
      >2
      #############################################################
      //JS按照代码块进行编译和执行
      <script>
        func();
      </script>
      <script>
        function func(){
        console.log("1");
      }
      </script>
      #############################################################
      >undefined
      
      <body>标签的onload事件是在最后执行，<body>内部的函数（<script>标签内定义的）会先于onload函数执行
      <script>的顺序决定了其执行顺序，JS是单线程依次执行的。事件是以“中断响应”的方式来处理的，
      
      
   （三）执行流程
    1.读入第一段代码段，js执行引擎并非一行一行的执行代码，而是一段一段地分析执行
    2.进行语法分析，有错误报错，跳转到5
    3.对var变量和function定义做预解析，不报错，只解析正确的声明
    4.执行代码段，有错报错
    5.读入下一个代码段，执行2
    6.结束


JavaScript的api设计原则
（一）接口的流畅性
  1.简单
  document.querySelector('#id').style.color = 'red'
  2.可阅读性
  函数命名语义化
  3.便于记忆
  命名简洁
  4.可延伸性
  js支持链式调用
（二）一致性
  代码风格和命名风格保持一致
（三）参数的处理
 
（四）可扩展性
  永远不要修改接口
  
（五）错误和异常处理




（六）可预见性




（七）注释和文档





闭包
  闭包一般用于把数据和作用于数据的代码联合起来。当你使用闭包的时候，你在外部作用域定义的数据元素可以被该作用域里定义的函数访问，即使当这个外部作用域在逻辑上已经退出了
  /******************************************************************************************
    function outer(a){
        var b = 20;
        function inner(c){
            var d = 40;
            return a*b / (d-c); 
        }
        return inner;
    }

    var x = outer(10);
    var y = x(30);
    ****************************************************************************************/




创建对象的七种模式
（一）工厂模式
  function createPerson(name, age){
      var o  = new Object();
      o.name = 'liebert';
      o.age  = 24;
      ···     
      
      return o;
  }
  
（二）构造函数模式
  function Person(name, age){
      this.name = 'liebert';
      this.age  = 24;
      ···
  }
  流程：创建一个新对象；将构造函数的作用域赋给新对象，this便指向了这个新对象；执行构造函数中的代码；返回新对象。
  
（三）原型模式
  function Person(){
  
  }
  Person.prototype.name = 'liebert';
  Person.prototype.age  = 24;
  
  每一个函数都对应一个原型对象，函数的prototype属性指向该原型对象，这样一来，其构造函数所创建的全部对象都享有该原型对象的修改变化。构造函数之间通过原型链组织在一起发生关系